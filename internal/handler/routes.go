// Code generated by goctl. DO NOT EDIT.
package handler

import (
	"net/http"

	bookInfo "ddxs-api/internal/handler/bookInfo"
	bookSort "ddxs-api/internal/handler/bookSort"
	home "ddxs-api/internal/handler/home"
	user "ddxs-api/internal/handler/user"
	"ddxs-api/internal/svc"

	"github.com/zeromicro/go-zero/rest"
)

func RegisterHandlers(server *rest.Server, serverCtx *svc.ServiceContext) {
	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/hot/tuijian",
				Handler: home.HotTuiJianHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/classic/tuijian",
				Handler: home.ClassicTuiJianHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/update/list",
				Handler: home.UpdataPostDataHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodGet,
				Path:    "/book/info/:id",
				Handler: bookInfo.BookInfoHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/book/last/chapter",
				Handler: bookInfo.BookLastChapterHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/book/hot/list",
				Handler: bookInfo.HotBookTuiJianHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/book/xiangguan/list",
				Handler: bookInfo.XiangGuanTuiJianHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/book/chapter/list",
				Handler: bookInfo.ChapterListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/book/chapter/context",
				Handler: bookInfo.ChapterContextHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/book/chapter/info",
				Handler: bookInfo.ChaterInfoHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/book/author/info",
				Handler: bookInfo.AuthorAllHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/sort/book/list",
				Handler: bookSort.SortBookListHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/query/book/sql",
				Handler: bookSort.SqlSerachBookHandler(serverCtx),
			},
			{
				Method:  http.MethodGet,
				Path:    "/query/sitemap/book",
				Handler: bookSort.SiteMapHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api"),
	)

	server.AddRoutes(
		[]rest.Route{
			{
				Method:  http.MethodPost,
				Path:    "/user/reg",
				Handler: user.UserRegHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/login",
				Handler: user.UserLoginHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/user/bookcase",
				Handler: user.UserBookCaseHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/add/bookcase",
				Handler: user.AddBookCaseHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/query/bookcase",
				Handler: user.QueryBookCaseHandler(serverCtx),
			},
			{
				Method:  http.MethodPost,
				Path:    "/delete/bookcase",
				Handler: user.DelBookCaseHandler(serverCtx),
			},
		},
		rest.WithPrefix("/api"),
	)
}
